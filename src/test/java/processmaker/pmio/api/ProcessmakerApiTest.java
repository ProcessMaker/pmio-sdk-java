/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package processmaker.pmio.api;

import processmaker.pmio.ApiException;
import processmaker.pmio.model.ErrorArray;
import processmaker.pmio.model.ClientItem;
import processmaker.pmio.model.ClientCreateItem;
import processmaker.pmio.model.EventItem;
import processmaker.pmio.model.EventCreateItem;
import processmaker.pmio.model.EventConnector1;
import processmaker.pmio.model.EventConnectorCreateItem;
import processmaker.pmio.model.FlowCreateItem;
import processmaker.pmio.model.FlowItem;
import processmaker.pmio.model.GatewayItem;
import processmaker.pmio.model.GatewayCreateItem;
import processmaker.pmio.model.GroupCreateItem;
import processmaker.pmio.model.GroupItem;
import processmaker.pmio.model.ResultSuccess;
import processmaker.pmio.model.TaskAddGroupsItem;
import processmaker.pmio.model.InputOutputCreateItem;
import processmaker.pmio.model.InputOutputItem;
import processmaker.pmio.model.InstanceCreateItem;
import processmaker.pmio.model.InstanceItem;
import processmaker.pmio.model.ProcessItem;
import processmaker.pmio.model.ProcessCreateItem;
import processmaker.pmio.model.TaskItem;
import processmaker.pmio.model.TaskCreateItem;
import processmaker.pmio.model.TaskConnectorCreateItem;
import processmaker.pmio.model.TaskConnector1;
import processmaker.pmio.model.UserItem;
import processmaker.pmio.model.UserCreateItem;
import processmaker.pmio.model.GroupAddUsersItem;
import processmaker.pmio.model.DataModelItem1;
import processmaker.pmio.model.TriggerEventCreateItem;
import processmaker.pmio.model.ClientCollection;
import processmaker.pmio.model.EventConnectorsCollection;
import processmaker.pmio.model.EventCollection;
import processmaker.pmio.model.FlowCollection;
import processmaker.pmio.model.GatewayCollection;
import processmaker.pmio.model.GroupCollection;
import processmaker.pmio.model.InputOutputCollection;
import processmaker.pmio.model.InstanceCollection;
import processmaker.pmio.model.ProcessCollection;
import processmaker.pmio.model.TaskConnectorsCollection;
import processmaker.pmio.model.InlineResponse200;
import processmaker.pmio.model.TaskInstanceCollection;
import processmaker.pmio.model.TaskCollection;
import processmaker.pmio.model.UserCollection;
import processmaker.pmio.model.BpmnImportItem;
import processmaker.pmio.model.ProcessCollection1;
import processmaker.pmio.model.TaskRemoveGroupsItem;
import processmaker.pmio.model.GroupRemoveUsersItem;
import processmaker.pmio.model.TaskSyncGroupsItem;
import processmaker.pmio.model.GroupSyncUsersItem;
import processmaker.pmio.model.ClientUpdateItem;
import processmaker.pmio.model.EventUpdateItem;
import processmaker.pmio.model.EventConnectorUpdateItem;
import processmaker.pmio.model.FlowUpdateItem;
import processmaker.pmio.model.GatewayUpdateItem;
import processmaker.pmio.model.GroupUpdateItem;
import processmaker.pmio.model.InputOutputUpdateItem;
import processmaker.pmio.model.InstanceUpdateItem;
import processmaker.pmio.model.ProcessUpdateItem;
import processmaker.pmio.model.TaskUpdateItem;
import processmaker.pmio.model.TaskConnectorUpdateItem;
import processmaker.pmio.model.TaskInstanceUpdateItem;
import processmaker.pmio.model.UserUpdateItem;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessmakerApi
 */
public class ProcessmakerApiTest {

    private final ProcessmakerApi api = new ProcessmakerApi();

    
    /**
     * 
     *
     * This method creates a new Oauth client for the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClientTest() throws ApiException {
        String userId = null;
        ClientCreateItem clientCreateItem = null;
        // ClientItem response = api.addClient(userId, clientCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates the new event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        String processId = null;
        EventCreateItem eventCreateItem = null;
        // EventItem response = api.addEvent(processId, eventCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new Event connector.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventConnectorTest() throws ApiException {
        String processId = null;
        String eventId = null;
        EventConnectorCreateItem eventConnectorCreateItem = null;
        // EventConnector1 response = api.addEventConnector(processId, eventId, eventConnectorCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new Sequence flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFlowTest() throws ApiException {
        String processId = null;
        FlowCreateItem flowCreateItem = null;
        // FlowItem response = api.addFlow(processId, flowCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGatewayTest() throws ApiException {
        String processId = null;
        GatewayCreateItem gatewayCreateItem = null;
        // GatewayItem response = api.addGateway(processId, gatewayCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupTest() throws ApiException {
        GroupCreateItem groupCreateItem = null;
        // GroupItem response = api.addGroup(groupCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method assigns group(s) to the choosen task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupsToTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskAddGroupsItem taskAddGroupsItem = null;
        // ResultSuccess response = api.addGroupsToTask(processId, taskId, taskAddGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new Input/Output object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        InputOutputCreateItem inputOutputCreateItem = null;
        // InputOutputItem response = api.addInputOutput(processId, taskId, inputOutputCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInstanceTest() throws ApiException {
        String processId = null;
        InstanceCreateItem instanceCreateItem = null;
        // InstanceItem response = api.addInstance(processId, instanceCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProcessTest() throws ApiException {
        ProcessCreateItem processCreateItem = null;
        // ProcessItem response = api.addProcess(processCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskTest() throws ApiException {
        String processId = null;
        TaskCreateItem taskCreateItem = null;
        // TaskItem response = api.addTask(processId, taskCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new task connector.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskConnectorTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskConnectorCreateItem taskConnectorCreateItem = null;
        // TaskConnector1 response = api.addTaskConnector(processId, taskId, taskConnectorCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method creates a new user in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        UserCreateItem userCreateItem = null;
        // UserItem response = api.addUser(userCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method adds one or more new users to a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUsersToGroupTest() throws ApiException {
        String id = null;
        GroupAddUsersItem groupAddUsersItem = null;
        // ResultSuccess response = api.addUsersToGroup(id, groupAddUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes an Oauth client using the client and user IDs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        // ResultSuccess response = api.deleteClient(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes an event using the event ID and process ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String processId = null;
        String eventId = null;
        // ResultSuccess response = api.deleteEvent(processId, eventId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventConnectorTest() throws ApiException {
        String processId = null;
        String eventId = null;
        String connectorId = null;
        // ResultSuccess response = api.deleteEventConnector(processId, eventId, connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes a sequence flow using the flow ID and process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        String processId = null;
        String flowId = null;
        // ResultSuccess response = api.deleteFlow(processId, flowId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is deletes a single item using the gateway ID and process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGatewayTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        // ResultSuccess response = api.deleteGateway(processId, gatewayId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes a group using the group ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteGroup(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        // ResultSuccess response = api.deleteInputOutput(processId, taskId, inputoutputUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes an instance using the instance ID and process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        // ResultSuccess response = api.deleteInstance(processId, instanceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes a process using the process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProcessTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteProcess(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes a task using the task ID and process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        // ResultSuccess response = api.deleteTask(processId, taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskConnectorTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String connectorId = null;
        // ResultSuccess response = api.deleteTaskConnector(processId, taskId, connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes a user from the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteUser(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method starts/triggers an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventTriggerTest() throws ApiException {
        String processId = null;
        String eventId = null;
        TriggerEventCreateItem triggerEventCreateItem = null;
        // DataModelItem1 response = api.eventTrigger(processId, eventId, triggerEventCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is retrieves an Oauth client based on its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findClientByIdTest() throws ApiException {
        String userId = null;
        String clientId = null;
        // ClientItem response = api.findClientById(userId, clientId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing clients belonging to an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findClientsTest() throws ApiException {
        String userId = null;
        Integer pagefindProcessById = null;
        Integer perPage = null;
        // ClientCollection response = api.findClients(userId, pagefindProcessById, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns the instance DataModel and lets the user work with it directly
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDataModelTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        Integer page = null;
        Integer perPage = null;
        // DataModelItem1 response = api.findDataModel(processId, instanceId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves an event using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventByIdTest() throws ApiException {
        String processId = null;
        String eventId = null;
        // EventItem response = api.findEventById(processId, eventId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns all Event connectors related to the run Process and Event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventConnectorByIdTest() throws ApiException {
        String processId = null;
        String eventId = null;
        String connectorId = null;
        // EventConnector1 response = api.findEventConnectorById(processId, eventId, connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns all Event connectors related to the run Process and Event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventConnectorsTest() throws ApiException {
        String processId = null;
        String eventId = null;
        Integer page = null;
        Integer perPage = null;
        // EventConnectorsCollection response = api.findEventConnectors(processId, eventId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns all events related to the runned process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventsTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // EventCollection response = api.findEvents(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves a flow based on its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFlowByIdTest() throws ApiException {
        String processId = null;
        String flowId = null;
        // FlowItem response = api.findFlowById(processId, flowId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing flows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFlowsTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // FlowCollection response = api.findFlows(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves a gateway based on its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGatewayByIdTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        // GatewayItem response = api.findGatewayById(processId, gatewayId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing gateways.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGatewaysTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // GatewayCollection response = api.findGateways(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves a group using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGroupByIdTest() throws ApiException {
        String id = null;
        // GroupItem response = api.findGroupById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGroupsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // GroupCollection response = api.findGroups(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves an Input/Output object using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInputOutputByIdTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        // InputOutputItem response = api.findInputOutputById(processId, taskId, inputoutputUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing Input/Output objects in the related task instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInputOutputsTest() throws ApiException {
        String processId = null;
        String taskId = null;
        Integer page = null;
        Integer perPage = null;
        // InputOutputCollection response = api.findInputOutputs(processId, taskId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves an instance using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInstanceByIdTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        // InstanceItem response = api.findInstanceById(processId, instanceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves related to the process using  the Process ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInstancesTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // InstanceCollection response = api.findInstances(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves a process using its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProcessByIdTest() throws ApiException {
        String id = null;
        // ProcessItem response = api.findProcessById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing processes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProcessesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // ProcessCollection response = api.findProcesses(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is retrieves a task using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskByIdTest() throws ApiException {
        String processId = null;
        String taskId = null;
        // TaskItem response = api.findTaskById(processId, taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving an Task connector based on it&#39;s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskConnectorByIdTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String connectorId = null;
        // TaskConnector1 response = api.findTaskConnectorById(processId, taskId, connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns all Task connectors related to the run Process and Task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskConnectorsTest() throws ApiException {
        String processId = null;
        String taskId = null;
        Integer page = null;
        Integer perPage = null;
        // TaskConnectorsCollection response = api.findTaskConnectors(processId, taskId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves a task instance based on its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskInstanceByIdTest() throws ApiException {
        String taskInstanceId = null;
        Integer page = null;
        Integer perPage = null;
        // InlineResponse200 response = api.findTaskInstanceById(taskInstanceId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method retrieves all existing task instances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskInstancesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // TaskInstanceCollection response = api.findTaskInstances(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for returning a list of all Tasks related to the process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTasksTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // TaskCollection response = api.findTasks(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns a user using its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        // UserItem response = api.findUserById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returs all existing users in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // UserCollection response = api.findUsers(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method imports BPMN files. A new process is created when import is successful.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importBpmnFileTest() throws ApiException {
        BpmnImportItem bpmnImportItem = null;
        // ProcessCollection1 response = api.importBpmnFile(bpmnImportItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns user information using a token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myselfUserTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // UserItem response = api.myselfUser(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method removes groups from a task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeGroupsFromTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskRemoveGroupsItem taskRemoveGroupsItem = null;
        // ResultSuccess response = api.removeGroupsFromTask(processId, taskId, taskRemoveGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method removes one or more users from a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUsersFromGroupTest() throws ApiException {
        String id = null;
        GroupRemoveUsersItem groupRemoveUsersItem = null;
        // ResultSuccess response = api.removeUsersFromGroup(id, groupRemoveUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method synchronizes a one or more groups with a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncGroupsToTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskSyncGroupsItem taskSyncGroupsItem = null;
        // ResultSuccess response = api.syncGroupsToTask(processId, taskId, taskSyncGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method synchronizes one or more users with a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncUsersToGroupTest() throws ApiException {
        String id = null;
        GroupSyncUsersItem groupSyncUsersItem = null;
        // ResultSuccess response = api.syncUsersToGroup(id, groupSyncUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing Oauth client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientTest() throws ApiException {
        String userId = null;
        String clientId = null;
        ClientUpdateItem clientUpdateItem = null;
        // ClientItem response = api.updateClient(userId, clientId, clientUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventTest() throws ApiException {
        String processId = null;
        String eventId = null;
        EventUpdateItem eventUpdateItem = null;
        // EventItem response = api.updateEvent(processId, eventId, eventUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method lets update the existing Event connector with new parameters values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventConnectorTest() throws ApiException {
        String processId = null;
        String eventId = null;
        String connectorId = null;
        EventConnectorUpdateItem eventConnectorUpdateItem = null;
        // EventConnector1 response = api.updateEventConnector(processId, eventId, connectorId, eventConnectorUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        String processId = null;
        String flowId = null;
        FlowUpdateItem flowUpdateItem = null;
        // FlowItem response = api.updateFlow(processId, flowId, flowUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGatewayTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        GatewayUpdateItem gatewayUpdateItem = null;
        // GatewayItem response = api.updateGateway(processId, gatewayId, gatewayUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String id = null;
        GroupUpdateItem groupUpdateItem = null;
        // GroupItem response = api.updateGroup(id, groupUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing Input/Output object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        InputOutputUpdateItem inputOutputUpdateItem = null;
        // InputOutputItem response = api.updateInputOutput(processId, taskId, inputoutputUid, inputOutputUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates  an existing instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        InstanceUpdateItem instanceUpdateItem = null;
        // InstanceItem response = api.updateInstance(processId, instanceId, instanceUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProcessTest() throws ApiException {
        String id = null;
        ProcessUpdateItem processUpdateItem = null;
        // ProcessItem response = api.updateProcess(id, processUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskUpdateItem taskUpdateItem = null;
        // TaskItem response = api.updateTask(processId, taskId, taskUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method lets update the existing Task connector with new parameters values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskConnectorTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String connectorId = null;
        TaskConnectorUpdateItem taskConnectorUpdateItem = null;
        // TaskConnector1 response = api.updateTaskConnector(processId, taskId, connectorId, taskConnectorUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing task instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskInstanceTest() throws ApiException {
        String taskInstanceId = null;
        TaskInstanceUpdateItem taskInstanceUpdateItem = null;
        // InlineResponse200 response = api.updateTaskInstance(taskInstanceId, taskInstanceUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method updates an existing user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UserUpdateItem userUpdateItem = null;
        // UserItem response = api.updateUser(id, userUpdateItem);

        // TODO: test validations
    }
    
}
