/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package processmaker.pmio.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * EventConnectorAttributes
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-06-01T11:35:23.537+03:00")
public class EventConnectorAttributes   {
  @SerializedName("event_id")
  private Integer eventId = null;

  @SerializedName("connector_class")
  private String connectorClass = "CorrelationKeys";

  @SerializedName("input_parameters")
  private String inputParameters = "[]";

  @SerializedName("output_parameters")
  private String outputParameters = "[]";

  @SerializedName("async_before")
  private Boolean asyncBefore = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("updated_at")
  private String updatedAt = null;

  public EventConnectorAttributes eventId(Integer eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getEventId() {
    return eventId;
  }

  public void setEventId(Integer eventId) {
    this.eventId = eventId;
  }

  public EventConnectorAttributes connectorClass(String connectorClass) {
    this.connectorClass = connectorClass;
    return this;
  }

   /**
   * Get connectorClass
   * @return connectorClass
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getConnectorClass() {
    return connectorClass;
  }

  public void setConnectorClass(String connectorClass) {
    this.connectorClass = connectorClass;
  }

  public EventConnectorAttributes inputParameters(String inputParameters) {
    this.inputParameters = inputParameters;
    return this;
  }

   /**
   * Get inputParameters
   * @return inputParameters
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getInputParameters() {
    return inputParameters;
  }

  public void setInputParameters(String inputParameters) {
    this.inputParameters = inputParameters;
  }

  public EventConnectorAttributes outputParameters(String outputParameters) {
    this.outputParameters = outputParameters;
    return this;
  }

   /**
   * Get outputParameters
   * @return outputParameters
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getOutputParameters() {
    return outputParameters;
  }

  public void setOutputParameters(String outputParameters) {
    this.outputParameters = outputParameters;
  }

  public EventConnectorAttributes asyncBefore(Boolean asyncBefore) {
    this.asyncBefore = asyncBefore;
    return this;
  }

   /**
   * Get asyncBefore
   * @return asyncBefore
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getAsyncBefore() {
    return asyncBefore;
  }

  public void setAsyncBefore(Boolean asyncBefore) {
    this.asyncBefore = asyncBefore;
  }

  public EventConnectorAttributes createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(example = "2017-01-01T00:00:00+00:00", value = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public EventConnectorAttributes updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @ApiModelProperty(example = "2017-01-01T00:00:00+00:00", value = "")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventConnectorAttributes eventConnectorAttributes = (EventConnectorAttributes) o;
    return Objects.equals(this.eventId, eventConnectorAttributes.eventId) &&
        Objects.equals(this.connectorClass, eventConnectorAttributes.connectorClass) &&
        Objects.equals(this.inputParameters, eventConnectorAttributes.inputParameters) &&
        Objects.equals(this.outputParameters, eventConnectorAttributes.outputParameters) &&
        Objects.equals(this.asyncBefore, eventConnectorAttributes.asyncBefore) &&
        Objects.equals(this.createdAt, eventConnectorAttributes.createdAt) &&
        Objects.equals(this.updatedAt, eventConnectorAttributes.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, connectorClass, inputParameters, outputParameters, asyncBefore, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventConnectorAttributes {\n");
    
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    connectorClass: ").append(toIndentedString(connectorClass)).append("\n");
    sb.append("    inputParameters: ").append(toIndentedString(inputParameters)).append("\n");
    sb.append("    outputParameters: ").append(toIndentedString(outputParameters)).append("\n");
    sb.append("    asyncBefore: ").append(toIndentedString(asyncBefore)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

