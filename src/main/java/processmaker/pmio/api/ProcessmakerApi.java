/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package processmaker.pmio.api;

import processmaker.pmio.ApiCallback;
import processmaker.pmio.ApiClient;
import processmaker.pmio.ApiException;
import processmaker.pmio.ApiResponse;
import processmaker.pmio.Configuration;
import processmaker.pmio.Pair;
import processmaker.pmio.ProgressRequestBody;
import processmaker.pmio.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import processmaker.pmio.model.ErrorArray;
import processmaker.pmio.model.ClientItem;
import processmaker.pmio.model.ClientCreateItem;
import processmaker.pmio.model.EventItem;
import processmaker.pmio.model.EventCreateItem;
import processmaker.pmio.model.EventConnector1;
import processmaker.pmio.model.EventConnectorCreateItem;
import processmaker.pmio.model.FlowCreateItem;
import processmaker.pmio.model.FlowItem;
import processmaker.pmio.model.GatewayItem;
import processmaker.pmio.model.GatewayCreateItem;
import processmaker.pmio.model.GroupCreateItem;
import processmaker.pmio.model.GroupItem;
import processmaker.pmio.model.ResultSuccess;
import processmaker.pmio.model.TaskAddGroupsItem;
import processmaker.pmio.model.InputOutputCreateItem;
import processmaker.pmio.model.InputOutputItem;
import processmaker.pmio.model.InstanceCreateItem;
import processmaker.pmio.model.InstanceItem;
import processmaker.pmio.model.ProcessItem;
import processmaker.pmio.model.ProcessCreateItem;
import processmaker.pmio.model.TaskItem;
import processmaker.pmio.model.TaskCreateItem;
import processmaker.pmio.model.TaskConnectorCreateItem;
import processmaker.pmio.model.TaskConnector1;
import processmaker.pmio.model.UserItem;
import processmaker.pmio.model.UserCreateItem;
import processmaker.pmio.model.GroupAddUsersItem;
import processmaker.pmio.model.DataModelItem1;
import processmaker.pmio.model.TriggerEventCreateItem;
import processmaker.pmio.model.ClientCollection;
import processmaker.pmio.model.EventConnectorsCollection;
import processmaker.pmio.model.EventCollection;
import processmaker.pmio.model.FlowCollection;
import processmaker.pmio.model.GatewayCollection;
import processmaker.pmio.model.GroupCollection;
import processmaker.pmio.model.InputOutputCollection;
import processmaker.pmio.model.InstanceCollection;
import processmaker.pmio.model.ProcessCollection;
import processmaker.pmio.model.TaskConnectorsCollection;
import processmaker.pmio.model.InlineResponse200;
import processmaker.pmio.model.TaskInstanceCollection;
import processmaker.pmio.model.TaskCollection;
import processmaker.pmio.model.UserCollection;
import processmaker.pmio.model.BpmnImportItem;
import processmaker.pmio.model.ProcessCollection1;
import processmaker.pmio.model.TaskRemoveGroupsItem;
import processmaker.pmio.model.GroupRemoveUsersItem;
import processmaker.pmio.model.TaskSyncGroupsItem;
import processmaker.pmio.model.GroupSyncUsersItem;
import processmaker.pmio.model.ClientUpdateItem;
import processmaker.pmio.model.EventUpdateItem;
import processmaker.pmio.model.EventConnectorUpdateItem;
import processmaker.pmio.model.FlowUpdateItem;
import processmaker.pmio.model.GatewayUpdateItem;
import processmaker.pmio.model.GroupUpdateItem;
import processmaker.pmio.model.InputOutputUpdateItem;
import processmaker.pmio.model.InstanceUpdateItem;
import processmaker.pmio.model.ProcessUpdateItem;
import processmaker.pmio.model.TaskUpdateItem;
import processmaker.pmio.model.TaskConnectorUpdateItem;
import processmaker.pmio.model.TaskInstanceUpdateItem;
import processmaker.pmio.model.UserUpdateItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessmakerApi {
    private ApiClient apiClient;

    public ProcessmakerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessmakerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addClient */
    private com.squareup.okhttp.Call addClientCall(String userId, ClientCreateItem clientCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCreateItem;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addClient(Async)");
        }
        
        // verify the required parameter 'clientCreateItem' is set
        if (clientCreateItem == null) {
            throw new ApiException("Missing the required parameter 'clientCreateItem' when calling addClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new Oauth client for the user
     * @param userId ID of the user related to the Oauth client (required)
     * @param clientCreateItem JSON API with the Oauth Client object to add (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem addClient(String userId, ClientCreateItem clientCreateItem) throws ApiException {
        ApiResponse<ClientItem> resp = addClientWithHttpInfo(userId, clientCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new Oauth client for the user
     * @param userId ID of the user related to the Oauth client (required)
     * @param clientCreateItem JSON API with the Oauth Client object to add (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> addClientWithHttpInfo(String userId, ClientCreateItem clientCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addClientCall(userId, clientCreateItem, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new Oauth client for the user
     * @param userId ID of the user related to the Oauth client (required)
     * @param clientCreateItem JSON API with the Oauth Client object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addClientAsync(String userId, ClientCreateItem clientCreateItem, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addClientCall(userId, clientCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addEvent */
    private com.squareup.okhttp.Call addEventCall(String processId, EventCreateItem eventCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addEvent(Async)");
        }
        
        // verify the required parameter 'eventCreateItem' is set
        if (eventCreateItem == null) {
            throw new ApiException("Missing the required parameter 'eventCreateItem' when calling addEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates the new event.
     * @param processId ID of the process related to the event (required)
     * @param eventCreateItem JSON API response with the Event object to add (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem addEvent(String processId, EventCreateItem eventCreateItem) throws ApiException {
        ApiResponse<EventItem> resp = addEventWithHttpInfo(processId, eventCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates the new event.
     * @param processId ID of the process related to the event (required)
     * @param eventCreateItem JSON API response with the Event object to add (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> addEventWithHttpInfo(String processId, EventCreateItem eventCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addEventCall(processId, eventCreateItem, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates the new event.
     * @param processId ID of the process related to the event (required)
     * @param eventCreateItem JSON API response with the Event object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEventAsync(String processId, EventCreateItem eventCreateItem, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEventCall(processId, eventCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addEventConnector */
    private com.squareup.okhttp.Call addEventConnectorCall(String processId, String eventId, EventConnectorCreateItem eventConnectorCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventConnectorCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addEventConnector(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling addEventConnector(Async)");
        }
        
        // verify the required parameter 'eventConnectorCreateItem' is set
        if (eventConnectorCreateItem == null) {
            throw new ApiException("Missing the required parameter 'eventConnectorCreateItem' when calling addEventConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/connectors".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new Event connector.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventConnectorCreateItem JSON API with the EventConnector object to add (required)
     * @return EventConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventConnector1 addEventConnector(String processId, String eventId, EventConnectorCreateItem eventConnectorCreateItem) throws ApiException {
        ApiResponse<EventConnector1> resp = addEventConnectorWithHttpInfo(processId, eventId, eventConnectorCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new Event connector.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventConnectorCreateItem JSON API with the EventConnector object to add (required)
     * @return ApiResponse&lt;EventConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventConnector1> addEventConnectorWithHttpInfo(String processId, String eventId, EventConnectorCreateItem eventConnectorCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addEventConnectorCall(processId, eventId, eventConnectorCreateItem, null, null);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new Event connector.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventConnectorCreateItem JSON API with the EventConnector object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEventConnectorAsync(String processId, String eventId, EventConnectorCreateItem eventConnectorCreateItem, final ApiCallback<EventConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEventConnectorCall(processId, eventId, eventConnectorCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addFlow */
    private com.squareup.okhttp.Call addFlowCall(String processId, FlowCreateItem flowCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flowCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addFlow(Async)");
        }
        
        // verify the required parameter 'flowCreateItem' is set
        if (flowCreateItem == null) {
            throw new ApiException("Missing the required parameter 'flowCreateItem' when calling addFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new Sequence flow
     * @param processId ID of the process related to the flow (required)
     * @param flowCreateItem JSON API response with the Flow object to add (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem addFlow(String processId, FlowCreateItem flowCreateItem) throws ApiException {
        ApiResponse<FlowItem> resp = addFlowWithHttpInfo(processId, flowCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new Sequence flow
     * @param processId ID of the process related to the flow (required)
     * @param flowCreateItem JSON API response with the Flow object to add (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> addFlowWithHttpInfo(String processId, FlowCreateItem flowCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addFlowCall(processId, flowCreateItem, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new Sequence flow
     * @param processId ID of the process related to the flow (required)
     * @param flowCreateItem JSON API response with the Flow object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFlowAsync(String processId, FlowCreateItem flowCreateItem, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFlowCall(processId, flowCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGateway */
    private com.squareup.okhttp.Call addGatewayCall(String processId, GatewayCreateItem gatewayCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gatewayCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addGateway(Async)");
        }
        
        // verify the required parameter 'gatewayCreateItem' is set
        if (gatewayCreateItem == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateItem' when calling addGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new gateway.
     * @param processId ID of the process related to the gateway (required)
     * @param gatewayCreateItem JSON API response with the gateway object to add (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem addGateway(String processId, GatewayCreateItem gatewayCreateItem) throws ApiException {
        ApiResponse<GatewayItem> resp = addGatewayWithHttpInfo(processId, gatewayCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new gateway.
     * @param processId ID of the process related to the gateway (required)
     * @param gatewayCreateItem JSON API response with the gateway object to add (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> addGatewayWithHttpInfo(String processId, GatewayCreateItem gatewayCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addGatewayCall(processId, gatewayCreateItem, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new gateway.
     * @param processId ID of the process related to the gateway (required)
     * @param gatewayCreateItem JSON API response with the gateway object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGatewayAsync(String processId, GatewayCreateItem gatewayCreateItem, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGatewayCall(processId, gatewayCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGroup */
    private com.squareup.okhttp.Call addGroupCall(GroupCreateItem groupCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupCreateItem;
        
        // verify the required parameter 'groupCreateItem' is set
        if (groupCreateItem == null) {
            throw new ApiException("Missing the required parameter 'groupCreateItem' when calling addGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new group.
     * @param groupCreateItem JSON API with the Group object to add (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem addGroup(GroupCreateItem groupCreateItem) throws ApiException {
        ApiResponse<GroupItem> resp = addGroupWithHttpInfo(groupCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new group.
     * @param groupCreateItem JSON API with the Group object to add (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> addGroupWithHttpInfo(GroupCreateItem groupCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addGroupCall(groupCreateItem, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new group.
     * @param groupCreateItem JSON API with the Group object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupAsync(GroupCreateItem groupCreateItem, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupCall(groupCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGroupsToTask */
    private com.squareup.okhttp.Call addGroupsToTaskCall(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskAddGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskAddGroupsItem' is set
        if (taskAddGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskAddGroupsItem' when calling addGroupsToTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method assigns group(s) to the choosen task
     * @param processId Process ID (required)
     * @param taskId ID of task to be modified (required)
     * @param taskAddGroupsItem JSON API with Groups ID&#39;s to add (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess addGroupsToTask(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = addGroupsToTaskWithHttpInfo(processId, taskId, taskAddGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method assigns group(s) to the choosen task
     * @param processId Process ID (required)
     * @param taskId ID of task to be modified (required)
     * @param taskAddGroupsItem JSON API with Groups ID&#39;s to add (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> addGroupsToTaskWithHttpInfo(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = addGroupsToTaskCall(processId, taskId, taskAddGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method assigns group(s) to the choosen task
     * @param processId Process ID (required)
     * @param taskId ID of task to be modified (required)
     * @param taskAddGroupsItem JSON API with Groups ID&#39;s to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupsToTaskAsync(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupsToTaskCall(processId, taskId, taskAddGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addInputOutput */
    private com.squareup.okhttp.Call addInputOutputCall(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputOutputCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addInputOutput(Async)");
        }
        
        // verify the required parameter 'inputOutputCreateItem' is set
        if (inputOutputCreateItem == null) {
            throw new ApiException("Missing the required parameter 'inputOutputCreateItem' when calling addInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new Input/Output object
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputOutputCreateItem Create and add a new Input/Output object with JSON API (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem addInputOutput(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem) throws ApiException {
        ApiResponse<InputOutputItem> resp = addInputOutputWithHttpInfo(processId, taskId, inputOutputCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new Input/Output object
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputOutputCreateItem Create and add a new Input/Output object with JSON API (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> addInputOutputWithHttpInfo(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addInputOutputCall(processId, taskId, inputOutputCreateItem, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new Input/Output object
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputOutputCreateItem Create and add a new Input/Output object with JSON API (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInputOutputAsync(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInputOutputCall(processId, taskId, inputOutputCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addInstance */
    private com.squareup.okhttp.Call addInstanceCall(String processId, InstanceCreateItem instanceCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = instanceCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addInstance(Async)");
        }
        
        // verify the required parameter 'instanceCreateItem' is set
        if (instanceCreateItem == null) {
            throw new ApiException("Missing the required parameter 'instanceCreateItem' when calling addInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new instance.
     * @param processId Process ID related to the nstance (required)
     * @param instanceCreateItem JSON API response with the Instance object to add (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem addInstance(String processId, InstanceCreateItem instanceCreateItem) throws ApiException {
        ApiResponse<InstanceItem> resp = addInstanceWithHttpInfo(processId, instanceCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new instance.
     * @param processId Process ID related to the nstance (required)
     * @param instanceCreateItem JSON API response with the Instance object to add (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> addInstanceWithHttpInfo(String processId, InstanceCreateItem instanceCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addInstanceCall(processId, instanceCreateItem, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new instance.
     * @param processId Process ID related to the nstance (required)
     * @param instanceCreateItem JSON API response with the Instance object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInstanceAsync(String processId, InstanceCreateItem instanceCreateItem, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInstanceCall(processId, instanceCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addProcess */
    private com.squareup.okhttp.Call addProcessCall(ProcessCreateItem processCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processCreateItem;
        
        // verify the required parameter 'processCreateItem' is set
        if (processCreateItem == null) {
            throw new ApiException("Missing the required parameter 'processCreateItem' when calling addProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new process
     * @param processCreateItem JSON API response with the Process object to add (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem addProcess(ProcessCreateItem processCreateItem) throws ApiException {
        ApiResponse<ProcessItem> resp = addProcessWithHttpInfo(processCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new process
     * @param processCreateItem JSON API response with the Process object to add (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> addProcessWithHttpInfo(ProcessCreateItem processCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addProcessCall(processCreateItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new process
     * @param processCreateItem JSON API response with the Process object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProcessAsync(ProcessCreateItem processCreateItem, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProcessCall(processCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTask */
    private com.squareup.okhttp.Call addTaskCall(String processId, TaskCreateItem taskCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addTask(Async)");
        }
        
        // verify the required parameter 'taskCreateItem' is set
        if (taskCreateItem == null) {
            throw new ApiException("Missing the required parameter 'taskCreateItem' when calling addTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new task.
     * @param processId Process ID related to the task (required)
     * @param taskCreateItem JSON API with the Task object to add (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem addTask(String processId, TaskCreateItem taskCreateItem) throws ApiException {
        ApiResponse<TaskItem> resp = addTaskWithHttpInfo(processId, taskCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new task.
     * @param processId Process ID related to the task (required)
     * @param taskCreateItem JSON API with the Task object to add (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> addTaskWithHttpInfo(String processId, TaskCreateItem taskCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addTaskCall(processId, taskCreateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new task.
     * @param processId Process ID related to the task (required)
     * @param taskCreateItem JSON API with the Task object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTaskAsync(String processId, TaskCreateItem taskCreateItem, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTaskCall(processId, taskCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTaskConnector */
    private com.squareup.okhttp.Call addTaskConnectorCall(String processId, String taskId, TaskConnectorCreateItem taskConnectorCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskConnectorCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addTaskConnector(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addTaskConnector(Async)");
        }
        
        // verify the required parameter 'taskConnectorCreateItem' is set
        if (taskConnectorCreateItem == null) {
            throw new ApiException("Missing the required parameter 'taskConnectorCreateItem' when calling addTaskConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new task connector.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskConnectorCreateItem JSON API with the TaskConnector object to add (required)
     * @return TaskConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskConnector1 addTaskConnector(String processId, String taskId, TaskConnectorCreateItem taskConnectorCreateItem) throws ApiException {
        ApiResponse<TaskConnector1> resp = addTaskConnectorWithHttpInfo(processId, taskId, taskConnectorCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new task connector.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskConnectorCreateItem JSON API with the TaskConnector object to add (required)
     * @return ApiResponse&lt;TaskConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskConnector1> addTaskConnectorWithHttpInfo(String processId, String taskId, TaskConnectorCreateItem taskConnectorCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addTaskConnectorCall(processId, taskId, taskConnectorCreateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new task connector.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskConnectorCreateItem JSON API with the TaskConnector object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTaskConnectorAsync(String processId, String taskId, TaskConnectorCreateItem taskConnectorCreateItem, final ApiCallback<TaskConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTaskConnectorCall(processId, taskId, taskConnectorCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUser */
    private com.squareup.okhttp.Call addUserCall(UserCreateItem userCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userCreateItem;
        
        // verify the required parameter 'userCreateItem' is set
        if (userCreateItem == null) {
            throw new ApiException("Missing the required parameter 'userCreateItem' when calling addUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method creates a new user in the system.
     * @param userCreateItem JSON API with the User object to add (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem addUser(UserCreateItem userCreateItem) throws ApiException {
        ApiResponse<UserItem> resp = addUserWithHttpInfo(userCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method creates a new user in the system.
     * @param userCreateItem JSON API with the User object to add (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> addUserWithHttpInfo(UserCreateItem userCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addUserCall(userCreateItem, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method creates a new user in the system.
     * @param userCreateItem JSON API with the User object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserAsync(UserCreateItem userCreateItem, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserCall(userCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUsersToGroup */
    private com.squareup.okhttp.Call addUsersToGroupCall(String id, GroupAddUsersItem groupAddUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupAddUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addUsersToGroup(Async)");
        }
        
        // verify the required parameter 'groupAddUsersItem' is set
        if (groupAddUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupAddUsersItem' when calling addUsersToGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method adds one or more new users to a group.
     * @param id ID of group to be modified (required)
     * @param groupAddUsersItem JSON API response with array of users ID&#39;s (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess addUsersToGroup(String id, GroupAddUsersItem groupAddUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = addUsersToGroupWithHttpInfo(id, groupAddUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method adds one or more new users to a group.
     * @param id ID of group to be modified (required)
     * @param groupAddUsersItem JSON API response with array of users ID&#39;s (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> addUsersToGroupWithHttpInfo(String id, GroupAddUsersItem groupAddUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = addUsersToGroupCall(id, groupAddUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method adds one or more new users to a group.
     * @param id ID of group to be modified (required)
     * @param groupAddUsersItem JSON API response with array of users ID&#39;s (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUsersToGroupAsync(String id, GroupAddUsersItem groupAddUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUsersToGroupCall(id, groupAddUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteClient */
    private com.squareup.okhttp.Call deleteClientCall(String userId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteClient(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes an Oauth client using the client and user IDs.
     * @param userId User ID (required)
     * @param clientId ID of client to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteClient(String userId, String clientId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteClientWithHttpInfo(userId, clientId);
        return resp.getData();
    }

    /**
     * 
     * This method deletes an Oauth client using the client and user IDs.
     * @param userId User ID (required)
     * @param clientId ID of client to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteClientWithHttpInfo(String userId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientCall(userId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes an Oauth client using the client and user IDs.
     * @param userId User ID (required)
     * @param clientId ID of client to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientAsync(String userId, String clientId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientCall(userId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteEvent */
    private com.squareup.okhttp.Call deleteEventCall(String processId, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes an event using the event ID and process ID
     * @param processId Process ID (required)
     * @param eventId ID of event to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteEvent(String processId, String eventId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteEventWithHttpInfo(processId, eventId);
        return resp.getData();
    }

    /**
     * 
     * This method deletes an event using the event ID and process ID
     * @param processId Process ID (required)
     * @param eventId ID of event to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteEventWithHttpInfo(String processId, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventCall(processId, eventId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes an event using the event ID and process ID
     * @param processId Process ID (required)
     * @param eventId ID of event to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventAsync(String processId, String eventId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventCall(processId, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteEventConnector */
    private com.squareup.okhttp.Call deleteEventConnectorCall(String processId, String eventId, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteEventConnector(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEventConnector(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling deleteEventConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteEventConnector(String processId, String eventId, String connectorId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteEventConnectorWithHttpInfo(processId, eventId, connectorId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteEventConnectorWithHttpInfo(String processId, String eventId, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventConnectorCall(processId, eventId, connectorId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventConnectorAsync(String processId, String eventId, String connectorId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventConnectorCall(processId, eventId, connectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteFlow */
    private com.squareup.okhttp.Call deleteFlowCall(String processId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteFlow(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling deleteFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes a sequence flow using the flow ID and process ID.
     * @param processId Process ID (required)
     * @param flowId ID of flow to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteFlow(String processId, String flowId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteFlowWithHttpInfo(processId, flowId);
        return resp.getData();
    }

    /**
     * 
     * This method deletes a sequence flow using the flow ID and process ID.
     * @param processId Process ID (required)
     * @param flowId ID of flow to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteFlowWithHttpInfo(String processId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFlowCall(processId, flowId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes a sequence flow using the flow ID and process ID.
     * @param processId Process ID (required)
     * @param flowId ID of flow to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFlowAsync(String processId, String flowId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFlowCall(processId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteGateway */
    private com.squareup.okhttp.Call deleteGatewayCall(String processId, String gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteGateway(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling deleteGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is deletes a single item using the gateway ID and process ID.
     * @param processId Process ID (required)
     * @param gatewayId ID of Process to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteGateway(String processId, String gatewayId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteGatewayWithHttpInfo(processId, gatewayId);
        return resp.getData();
    }

    /**
     * 
     * This method is deletes a single item using the gateway ID and process ID.
     * @param processId Process ID (required)
     * @param gatewayId ID of Process to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteGatewayWithHttpInfo(String processId, String gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGatewayCall(processId, gatewayId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is deletes a single item using the gateway ID and process ID.
     * @param processId Process ID (required)
     * @param gatewayId ID of Process to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGatewayAsync(String processId, String gatewayId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGatewayCall(processId, gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteGroup */
    private com.squareup.okhttp.Call deleteGroupCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes a group using the group ID
     * @param id ID of group to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteGroup(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteGroupWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method deletes a group using the group ID
     * @param id ID of group to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteGroupWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes a group using the group ID
     * @param id ID of group to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInputOutput */
    private com.squareup.okhttp.Call deleteInputOutputCall(String processId, String taskId, String inputoutputUid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteInputOutput(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling deleteInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputoutputUid Input/Output ID to fetch (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteInputOutput(String processId, String taskId, String inputoutputUid) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteInputOutputWithHttpInfo(processId, taskId, inputoutputUid);
        return resp.getData();
    }

    /**
     * 
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputoutputUid Input/Output ID to fetch (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteInputOutputWithHttpInfo(String processId, String taskId, String inputoutputUid) throws ApiException {
        com.squareup.okhttp.Call call = deleteInputOutputCall(processId, taskId, inputoutputUid, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param inputoutputUid Input/Output ID to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInputOutputAsync(String processId, String taskId, String inputoutputUid, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInputOutputCall(processId, taskId, inputoutputUid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInstance */
    private com.squareup.okhttp.Call deleteInstanceCall(String processId, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteInstance(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes an instance using the instance ID and process ID.
     * @param processId Process ID (required)
     * @param instanceId ID of instance to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteInstance(String processId, String instanceId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteInstanceWithHttpInfo(processId, instanceId);
        return resp.getData();
    }

    /**
     * 
     * This method deletes an instance using the instance ID and process ID.
     * @param processId Process ID (required)
     * @param instanceId ID of instance to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteInstanceWithHttpInfo(String processId, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInstanceCall(processId, instanceId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes an instance using the instance ID and process ID.
     * @param processId Process ID (required)
     * @param instanceId ID of instance to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInstanceAsync(String processId, String instanceId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInstanceCall(processId, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteProcess */
    private com.squareup.okhttp.Call deleteProcessCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes a process using the process ID.
     * @param id Process ID to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteProcess(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteProcessWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method deletes a process using the process ID.
     * @param id Process ID to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteProcessWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteProcessCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes a process using the process ID.
     * @param id Process ID to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProcessAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProcessCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTask */
    private com.squareup.okhttp.Call deleteTaskCall(String processId, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes a task using the task ID and process ID.
     * @param processId Process ID (required)
     * @param taskId ID of task to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteTask(String processId, String taskId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteTaskWithHttpInfo(processId, taskId);
        return resp.getData();
    }

    /**
     * 
     * This method deletes a task using the task ID and process ID.
     * @param processId Process ID (required)
     * @param taskId ID of task to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteTaskWithHttpInfo(String processId, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskCall(processId, taskId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes a task using the task ID and process ID.
     * @param processId Process ID (required)
     * @param taskId ID of task to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskAsync(String processId, String taskId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskCall(processId, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTaskConnector */
    private com.squareup.okhttp.Call deleteTaskConnectorCall(String processId, String taskId, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteTaskConnector(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTaskConnector(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling deleteTaskConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
     * @param processId ID of Process item to fetch (required)
     * @param taskId ID of Task item to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteTaskConnector(String processId, String taskId, String connectorId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteTaskConnectorWithHttpInfo(processId, taskId, connectorId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
     * @param processId ID of Process item to fetch (required)
     * @param taskId ID of Task item to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteTaskConnectorWithHttpInfo(String processId, String taskId, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskConnectorCall(processId, taskId, connectorId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
     * @param processId ID of Process item to fetch (required)
     * @param taskId ID of Task item to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskConnectorAsync(String processId, String taskId, String connectorId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskConnectorCall(processId, taskId, connectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes a user from the system.
     * @param id ID of user to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteUser(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteUserWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method deletes a user from the system.
     * @param id ID of user to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteUserWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes a user from the system.
     * @param id ID of user to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for eventTrigger */
    private com.squareup.okhttp.Call eventTriggerCall(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = triggerEventCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling eventTrigger(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventTrigger(Async)");
        }
        
        // verify the required parameter 'triggerEventCreateItem' is set
        if (triggerEventCreateItem == null) {
            throw new ApiException("Missing the required parameter 'triggerEventCreateItem' when calling eventTrigger(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/trigger".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method starts/triggers an event.
     * @param processId Process ID related to the event (required)
     * @param eventId ID of event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @return DataModelItem1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataModelItem1 eventTrigger(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem) throws ApiException {
        ApiResponse<DataModelItem1> resp = eventTriggerWithHttpInfo(processId, eventId, triggerEventCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method starts/triggers an event.
     * @param processId Process ID related to the event (required)
     * @param eventId ID of event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @return ApiResponse&lt;DataModelItem1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataModelItem1> eventTriggerWithHttpInfo(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = eventTriggerCall(processId, eventId, triggerEventCreateItem, null, null);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method starts/triggers an event.
     * @param processId Process ID related to the event (required)
     * @param eventId ID of event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventTriggerAsync(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem, final ApiCallback<DataModelItem1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventTriggerCall(processId, eventId, triggerEventCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findClientById */
    private com.squareup.okhttp.Call findClientByIdCall(String userId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findClientById(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling findClientById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is retrieves an Oauth client based on its ID.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem findClientById(String userId, String clientId) throws ApiException {
        ApiResponse<ClientItem> resp = findClientByIdWithHttpInfo(userId, clientId);
        return resp.getData();
    }

    /**
     * 
     * This method is retrieves an Oauth client based on its ID.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> findClientByIdWithHttpInfo(String userId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = findClientByIdCall(userId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is retrieves an Oauth client based on its ID.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findClientByIdAsync(String userId, String clientId, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findClientByIdCall(userId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findClients */
    private com.squareup.okhttp.Call findClientsCall(String userId, Integer pagefindProcessById, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findClients(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pagefindProcessById != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pagefindProcessById", pagefindProcessById));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing clients belonging to an user.
     * @param userId User ID related to the clients (required)
     * @param pagefindProcessById Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ClientCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientCollection findClients(String userId, Integer pagefindProcessById, Integer perPage) throws ApiException {
        ApiResponse<ClientCollection> resp = findClientsWithHttpInfo(userId, pagefindProcessById, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing clients belonging to an user.
     * @param userId User ID related to the clients (required)
     * @param pagefindProcessById Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;ClientCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientCollection> findClientsWithHttpInfo(String userId, Integer pagefindProcessById, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findClientsCall(userId, pagefindProcessById, perPage, null, null);
        Type localVarReturnType = new TypeToken<ClientCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing clients belonging to an user.
     * @param userId User ID related to the clients (required)
     * @param pagefindProcessById Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findClientsAsync(String userId, Integer pagefindProcessById, Integer perPage, final ApiCallback<ClientCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findClientsCall(userId, pagefindProcessById, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findDataModel */
    private com.squareup.okhttp.Call findDataModelCall(String processId, String instanceId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findDataModel(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling findDataModel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}/datamodel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns the instance DataModel and lets the user work with it directly
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return DataModelItem1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataModelItem1 findDataModel(String processId, String instanceId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<DataModelItem1> resp = findDataModelWithHttpInfo(processId, instanceId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns the instance DataModel and lets the user work with it directly
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;DataModelItem1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataModelItem1> findDataModelWithHttpInfo(String processId, String instanceId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findDataModelCall(processId, instanceId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns the instance DataModel and lets the user work with it directly
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findDataModelAsync(String processId, String instanceId, Integer page, Integer perPage, final ApiCallback<DataModelItem1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findDataModelCall(processId, instanceId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEventById */
    private com.squareup.okhttp.Call findEventByIdCall(String processId, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEventById(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling findEventById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves an event using its ID.
     * @param processId ID of process to return (required)
     * @param eventId ID of event to return (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem findEventById(String processId, String eventId) throws ApiException {
        ApiResponse<EventItem> resp = findEventByIdWithHttpInfo(processId, eventId);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves an event using its ID.
     * @param processId ID of process to return (required)
     * @param eventId ID of event to return (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> findEventByIdWithHttpInfo(String processId, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = findEventByIdCall(processId, eventId, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves an event using its ID.
     * @param processId ID of process to return (required)
     * @param eventId ID of event to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventByIdAsync(String processId, String eventId, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventByIdCall(processId, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEventConnectorById */
    private com.squareup.okhttp.Call findEventConnectorByIdCall(String processId, String eventId, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEventConnectorById(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling findEventConnectorById(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling findEventConnectorById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @return EventConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventConnector1 findEventConnectorById(String processId, String eventId, String connectorId) throws ApiException {
        ApiResponse<EventConnector1> resp = findEventConnectorByIdWithHttpInfo(processId, eventId, connectorId);
        return resp.getData();
    }

    /**
     * 
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @return ApiResponse&lt;EventConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventConnector1> findEventConnectorByIdWithHttpInfo(String processId, String eventId, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = findEventConnectorByIdCall(processId, eventId, connectorId, null, null);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of EventConnector to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventConnectorByIdAsync(String processId, String eventId, String connectorId, final ApiCallback<EventConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventConnectorByIdCall(processId, eventId, connectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEventConnectors */
    private com.squareup.okhttp.Call findEventConnectorsCall(String processId, String eventId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEventConnectors(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling findEventConnectors(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/connectors".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return EventConnectorsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventConnectorsCollection findEventConnectors(String processId, String eventId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<EventConnectorsCollection> resp = findEventConnectorsWithHttpInfo(processId, eventId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;EventConnectorsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventConnectorsCollection> findEventConnectorsWithHttpInfo(String processId, String eventId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findEventConnectorsCall(processId, eventId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<EventConnectorsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns all Event connectors related to the run Process and Event.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventConnectorsAsync(String processId, String eventId, Integer page, Integer perPage, final ApiCallback<EventConnectorsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventConnectorsCall(processId, eventId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventConnectorsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEvents */
    private com.squareup.okhttp.Call findEventsCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns all events related to the runned process
     * @param processId ID of process related to the event (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return EventCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventCollection findEvents(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<EventCollection> resp = findEventsWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns all events related to the runned process
     * @param processId ID of process related to the event (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;EventCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventCollection> findEventsWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findEventsCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<EventCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns all events related to the runned process
     * @param processId ID of process related to the event (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventsAsync(String processId, Integer page, Integer perPage, final ApiCallback<EventCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventsCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findFlowById */
    private com.squareup.okhttp.Call findFlowByIdCall(String processId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findFlowById(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling findFlowById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves a flow based on its ID.
     * @param processId ID of process to return (required)
     * @param flowId ID of flow to return (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem findFlowById(String processId, String flowId) throws ApiException {
        ApiResponse<FlowItem> resp = findFlowByIdWithHttpInfo(processId, flowId);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves a flow based on its ID.
     * @param processId ID of process to return (required)
     * @param flowId ID of flow to return (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> findFlowByIdWithHttpInfo(String processId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = findFlowByIdCall(processId, flowId, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves a flow based on its ID.
     * @param processId ID of process to return (required)
     * @param flowId ID of flow to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findFlowByIdAsync(String processId, String flowId, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findFlowByIdCall(processId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findFlows */
    private com.squareup.okhttp.Call findFlowsCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findFlows(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing flows.
     * @param processId ID of process related to the flow (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return FlowCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowCollection findFlows(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<FlowCollection> resp = findFlowsWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing flows.
     * @param processId ID of process related to the flow (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;FlowCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowCollection> findFlowsWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findFlowsCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<FlowCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing flows.
     * @param processId ID of process related to the flow (required)
     * @param page Page numbers to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findFlowsAsync(String processId, Integer page, Integer perPage, final ApiCallback<FlowCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findFlowsCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGatewayById */
    private com.squareup.okhttp.Call findGatewayByIdCall(String processId, String gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findGatewayById(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling findGatewayById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves a gateway based on its ID.
     * @param processId ID of process to return (required)
     * @param gatewayId ID of gateway to return (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem findGatewayById(String processId, String gatewayId) throws ApiException {
        ApiResponse<GatewayItem> resp = findGatewayByIdWithHttpInfo(processId, gatewayId);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves a gateway based on its ID.
     * @param processId ID of process to return (required)
     * @param gatewayId ID of gateway to return (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> findGatewayByIdWithHttpInfo(String processId, String gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = findGatewayByIdCall(processId, gatewayId, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves a gateway based on its ID.
     * @param processId ID of process to return (required)
     * @param gatewayId ID of gateway to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGatewayByIdAsync(String processId, String gatewayId, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGatewayByIdCall(processId, gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGateways */
    private com.squareup.okhttp.Call findGatewaysCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findGateways(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing gateways.
     * @param processId ID of process related to the gateway (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return GatewayCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayCollection findGateways(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<GatewayCollection> resp = findGatewaysWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing gateways.
     * @param processId ID of process related to the gateway (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;GatewayCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayCollection> findGatewaysWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findGatewaysCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<GatewayCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing gateways.
     * @param processId ID of process related to the gateway (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGatewaysAsync(String processId, Integer page, Integer perPage, final ApiCallback<GatewayCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGatewaysCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGroupById */
    private com.squareup.okhttp.Call findGroupByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findGroupById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves a group using its ID.
     * @param id ID of group to return (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem findGroupById(String id) throws ApiException {
        ApiResponse<GroupItem> resp = findGroupByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves a group using its ID.
     * @param id ID of group to return (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> findGroupByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findGroupByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves a group using its ID.
     * @param id ID of group to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGroupByIdAsync(String id, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGroupByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGroups */
    private com.squareup.okhttp.Call findGroupsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing groups.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return GroupCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupCollection findGroups(Integer page, Integer perPage) throws ApiException {
        ApiResponse<GroupCollection> resp = findGroupsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing groups.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;GroupCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupCollection> findGroupsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findGroupsCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing groups.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGroupsAsync(Integer page, Integer perPage, final ApiCallback<GroupCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGroupsCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInputOutputById */
    private com.squareup.okhttp.Call findInputOutputByIdCall(String processId, String taskId, String inputoutputUid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInputOutputById(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findInputOutputById(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling findInputOutputById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves an Input/Output object using its ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to return (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem findInputOutputById(String processId, String taskId, String inputoutputUid) throws ApiException {
        ApiResponse<InputOutputItem> resp = findInputOutputByIdWithHttpInfo(processId, taskId, inputoutputUid);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves an Input/Output object using its ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to return (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> findInputOutputByIdWithHttpInfo(String processId, String taskId, String inputoutputUid) throws ApiException {
        com.squareup.okhttp.Call call = findInputOutputByIdCall(processId, taskId, inputoutputUid, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves an Input/Output object using its ID.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInputOutputByIdAsync(String processId, String taskId, String inputoutputUid, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInputOutputByIdCall(processId, taskId, inputoutputUid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInputOutputs */
    private com.squareup.okhttp.Call findInputOutputsCall(String processId, String taskId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInputOutputs(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findInputOutputs(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing Input/Output objects in the related task instance.
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return InputOutputCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputCollection findInputOutputs(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InputOutputCollection> resp = findInputOutputsWithHttpInfo(processId, taskId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing Input/Output objects in the related task instance.
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;InputOutputCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputCollection> findInputOutputsWithHttpInfo(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findInputOutputsCall(processId, taskId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InputOutputCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing Input/Output objects in the related task instance.
     * @param processId Process ID related to Input/Output object (required)
     * @param taskId Task instance ID related to Input/Output object (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInputOutputsAsync(String processId, String taskId, Integer page, Integer perPage, final ApiCallback<InputOutputCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInputOutputsCall(processId, taskId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInstanceById */
    private com.squareup.okhttp.Call findInstanceByIdCall(String processId, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInstanceById(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling findInstanceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves an instance using its ID.
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem findInstanceById(String processId, String instanceId) throws ApiException {
        ApiResponse<InstanceItem> resp = findInstanceByIdWithHttpInfo(processId, instanceId);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves an instance using its ID.
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> findInstanceByIdWithHttpInfo(String processId, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = findInstanceByIdCall(processId, instanceId, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves an instance using its ID.
     * @param processId ID of process to return (required)
     * @param instanceId ID of instance to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInstanceByIdAsync(String processId, String instanceId, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInstanceByIdCall(processId, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInstances */
    private com.squareup.okhttp.Call findInstancesCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInstances(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves related to the process using  the Process ID
     * @param processId Process ID related to the instances (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return InstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceCollection findInstances(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InstanceCollection> resp = findInstancesWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves related to the process using  the Process ID
     * @param processId Process ID related to the instances (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;InstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceCollection> findInstancesWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findInstancesCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InstanceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves related to the process using  the Process ID
     * @param processId Process ID related to the instances (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInstancesAsync(String processId, Integer page, Integer perPage, final ApiCallback<InstanceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInstancesCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findProcessById */
    private com.squareup.okhttp.Call findProcessByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findProcessById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves a process using its ID
     * @param id ID of process to return (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem findProcessById(String id) throws ApiException {
        ApiResponse<ProcessItem> resp = findProcessByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves a process using its ID
     * @param id ID of process to return (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> findProcessByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findProcessByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves a process using its ID
     * @param id ID of process to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findProcessByIdAsync(String id, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findProcessByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findProcesses */
    private com.squareup.okhttp.Call findProcessesCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/processes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing processes.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ProcessCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessCollection findProcesses(Integer page, Integer perPage) throws ApiException {
        ApiResponse<ProcessCollection> resp = findProcessesWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing processes.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;ProcessCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessCollection> findProcessesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findProcessesCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<ProcessCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing processes.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findProcessesAsync(Integer page, Integer perPage, final ApiCallback<ProcessCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findProcessesCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskById */
    private com.squareup.okhttp.Call findTaskByIdCall(String processId, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTaskById(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findTaskById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is retrieves a task using its ID.
     * @param processId ID of process to return (required)
     * @param taskId ID of task to return (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem findTaskById(String processId, String taskId) throws ApiException {
        ApiResponse<TaskItem> resp = findTaskByIdWithHttpInfo(processId, taskId);
        return resp.getData();
    }

    /**
     * 
     * This method is retrieves a task using its ID.
     * @param processId ID of process to return (required)
     * @param taskId ID of task to return (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> findTaskByIdWithHttpInfo(String processId, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = findTaskByIdCall(processId, taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is retrieves a task using its ID.
     * @param processId ID of process to return (required)
     * @param taskId ID of task to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskByIdAsync(String processId, String taskId, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskByIdCall(processId, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskConnectorById */
    private com.squareup.okhttp.Call findTaskConnectorByIdCall(String processId, String taskId, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTaskConnectorById(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findTaskConnectorById(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling findTaskConnectorById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving an Task connector based on it&#39;s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @return TaskConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskConnector1 findTaskConnectorById(String processId, String taskId, String connectorId) throws ApiException {
        ApiResponse<TaskConnector1> resp = findTaskConnectorByIdWithHttpInfo(processId, taskId, connectorId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving an Task connector based on it&#39;s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @return ApiResponse&lt;TaskConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskConnector1> findTaskConnectorByIdWithHttpInfo(String processId, String taskId, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = findTaskConnectorByIdCall(processId, taskId, connectorId, null, null);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving an Task connector based on it&#39;s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of TaskConnector to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskConnectorByIdAsync(String processId, String taskId, String connectorId, final ApiCallback<TaskConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskConnectorByIdCall(processId, taskId, connectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskConnectors */
    private com.squareup.okhttp.Call findTaskConnectorsCall(String processId, String taskId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTaskConnectors(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findTaskConnectors(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns all Task connectors related to the run Process and Task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return TaskConnectorsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskConnectorsCollection findTaskConnectors(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<TaskConnectorsCollection> resp = findTaskConnectorsWithHttpInfo(processId, taskId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns all Task connectors related to the run Process and Task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;TaskConnectorsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskConnectorsCollection> findTaskConnectorsWithHttpInfo(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTaskConnectorsCall(processId, taskId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<TaskConnectorsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns all Task connectors related to the run Process and Task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskConnectorsAsync(String processId, String taskId, Integer page, Integer perPage, final ApiCallback<TaskConnectorsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskConnectorsCall(processId, taskId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskConnectorsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskInstanceById */
    private com.squareup.okhttp.Call findTaskInstanceByIdCall(String taskInstanceId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskInstanceId' is set
        if (taskInstanceId == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceId' when calling findTaskInstanceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/task_instances/{task_instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "task_instance_id" + "\\}", apiClient.escapeString(taskInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves a task instance based on its ID.
     * @param taskInstanceId ID of task instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 findTaskInstanceById(String taskInstanceId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse200> resp = findTaskInstanceByIdWithHttpInfo(taskInstanceId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves a task instance based on its ID.
     * @param taskInstanceId ID of task instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> findTaskInstanceByIdWithHttpInfo(String taskInstanceId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTaskInstanceByIdCall(taskInstanceId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves a task instance based on its ID.
     * @param taskInstanceId ID of task instance to return (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskInstanceByIdAsync(String taskInstanceId, Integer page, Integer perPage, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskInstanceByIdCall(taskInstanceId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskInstances */
    private com.squareup.okhttp.Call findTaskInstancesCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/task_instances".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method retrieves all existing task instances
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return TaskInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskInstanceCollection findTaskInstances(Integer page, Integer perPage) throws ApiException {
        ApiResponse<TaskInstanceCollection> resp = findTaskInstancesWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method retrieves all existing task instances
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;TaskInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskInstanceCollection> findTaskInstancesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTaskInstancesCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<TaskInstanceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method retrieves all existing task instances
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskInstancesAsync(Integer page, Integer perPage, final ApiCallback<TaskInstanceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskInstancesCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskInstanceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTasks */
    private com.squareup.okhttp.Call findTasksCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTasks(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return TaskCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskCollection findTasks(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<TaskCollection> resp = findTasksWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @return ApiResponse&lt;TaskCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskCollection> findTasksWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTasksCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTasksAsync(String processId, Integer page, Integer perPage, final ApiCallback<TaskCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTasksCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUserById */
    private com.squareup.okhttp.Call findUserByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findUserById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns a user using its ID.
     * @param id ID of the user to return (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem findUserById(String id) throws ApiException {
        ApiResponse<UserItem> resp = findUserByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method returns a user using its ID.
     * @param id ID of the user to return (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> findUserByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findUserByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns a user using its ID.
     * @param id ID of the user to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserByIdAsync(String id, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUsers */
    private com.squareup.okhttp.Call findUsersCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returs all existing users in the system.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return UserCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserCollection findUsers(Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserCollection> resp = findUsersWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returs all existing users in the system.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;UserCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserCollection> findUsersWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findUsersCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returs all existing users in the system.
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUsersAsync(Integer page, Integer perPage, final ApiCallback<UserCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUsersCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importBpmnFile */
    private com.squareup.okhttp.Call importBpmnFileCall(BpmnImportItem bpmnImportItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bpmnImportItem;
        
        // verify the required parameter 'bpmnImportItem' is set
        if (bpmnImportItem == null) {
            throw new ApiException("Missing the required parameter 'bpmnImportItem' when calling importBpmnFile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/import".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method imports BPMN files. A new process is created when import is successful.
     * @param bpmnImportItem JSON API with the BPMN file to import (required)
     * @return ProcessCollection1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessCollection1 importBpmnFile(BpmnImportItem bpmnImportItem) throws ApiException {
        ApiResponse<ProcessCollection1> resp = importBpmnFileWithHttpInfo(bpmnImportItem);
        return resp.getData();
    }

    /**
     * 
     * This method imports BPMN files. A new process is created when import is successful.
     * @param bpmnImportItem JSON API with the BPMN file to import (required)
     * @return ApiResponse&lt;ProcessCollection1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessCollection1> importBpmnFileWithHttpInfo(BpmnImportItem bpmnImportItem) throws ApiException {
        com.squareup.okhttp.Call call = importBpmnFileCall(bpmnImportItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessCollection1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method imports BPMN files. A new process is created when import is successful.
     * @param bpmnImportItem JSON API with the BPMN file to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importBpmnFileAsync(BpmnImportItem bpmnImportItem, final ApiCallback<ProcessCollection1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importBpmnFileCall(bpmnImportItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessCollection1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for myselfUser */
    private com.squareup.okhttp.Call myselfUserCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/users/myself".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns user information using a token
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem myselfUser(Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserItem> resp = myselfUserWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns user information using a token
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> myselfUserWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = myselfUserCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns user information using a token
     * @param page Page number to fetch (optional, default to 1)
     * @param perPage Amount of items per page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call myselfUserAsync(Integer page, Integer perPage, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = myselfUserCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeGroupsFromTask */
    private com.squareup.okhttp.Call removeGroupsFromTaskCall(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskRemoveGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling removeGroupsFromTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeGroupsFromTask(Async)");
        }
        
        // verify the required parameter 'taskRemoveGroupsItem' is set
        if (taskRemoveGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskRemoveGroupsItem' when calling removeGroupsFromTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method removes groups from a task
     * @param processId Process ID (required)
     * @param taskId Task ID (required)
     * @param taskRemoveGroupsItem JSON API response with Groups IDs to remove (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess removeGroupsFromTask(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = removeGroupsFromTaskWithHttpInfo(processId, taskId, taskRemoveGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method removes groups from a task
     * @param processId Process ID (required)
     * @param taskId Task ID (required)
     * @param taskRemoveGroupsItem JSON API response with Groups IDs to remove (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> removeGroupsFromTaskWithHttpInfo(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = removeGroupsFromTaskCall(processId, taskId, taskRemoveGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method removes groups from a task
     * @param processId Process ID (required)
     * @param taskId Task ID (required)
     * @param taskRemoveGroupsItem JSON API response with Groups IDs to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeGroupsFromTaskAsync(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeGroupsFromTaskCall(processId, taskId, taskRemoveGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeUsersFromGroup */
    private com.squareup.okhttp.Call removeUsersFromGroupCall(String id, GroupRemoveUsersItem groupRemoveUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupRemoveUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeUsersFromGroup(Async)");
        }
        
        // verify the required parameter 'groupRemoveUsersItem' is set
        if (groupRemoveUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupRemoveUsersItem' when calling removeUsersFromGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method removes one or more users from a group.
     * @param id ID of group to be modified (required)
     * @param groupRemoveUsersItem JSON API response with Users IDs to remove (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess removeUsersFromGroup(String id, GroupRemoveUsersItem groupRemoveUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = removeUsersFromGroupWithHttpInfo(id, groupRemoveUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method removes one or more users from a group.
     * @param id ID of group to be modified (required)
     * @param groupRemoveUsersItem JSON API response with Users IDs to remove (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> removeUsersFromGroupWithHttpInfo(String id, GroupRemoveUsersItem groupRemoveUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = removeUsersFromGroupCall(id, groupRemoveUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method removes one or more users from a group.
     * @param id ID of group to be modified (required)
     * @param groupRemoveUsersItem JSON API response with Users IDs to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUsersFromGroupAsync(String id, GroupRemoveUsersItem groupRemoveUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUsersFromGroupCall(id, groupRemoveUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for syncGroupsToTask */
    private com.squareup.okhttp.Call syncGroupsToTaskCall(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskSyncGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling syncGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling syncGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskSyncGroupsItem' is set
        if (taskSyncGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskSyncGroupsItem' when calling syncGroupsToTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method synchronizes a one or more groups with a task.
     * @param processId Process ID (required)
     * @param taskId ID of task to modify (required)
     * @param taskSyncGroupsItem JSON API response with groups IDs to sync (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess syncGroupsToTask(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = syncGroupsToTaskWithHttpInfo(processId, taskId, taskSyncGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method synchronizes a one or more groups with a task.
     * @param processId Process ID (required)
     * @param taskId ID of task to modify (required)
     * @param taskSyncGroupsItem JSON API response with groups IDs to sync (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> syncGroupsToTaskWithHttpInfo(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = syncGroupsToTaskCall(processId, taskId, taskSyncGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method synchronizes a one or more groups with a task.
     * @param processId Process ID (required)
     * @param taskId ID of task to modify (required)
     * @param taskSyncGroupsItem JSON API response with groups IDs to sync (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncGroupsToTaskAsync(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncGroupsToTaskCall(processId, taskId, taskSyncGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for syncUsersToGroup */
    private com.squareup.okhttp.Call syncUsersToGroupCall(String id, GroupSyncUsersItem groupSyncUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupSyncUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling syncUsersToGroup(Async)");
        }
        
        // verify the required parameter 'groupSyncUsersItem' is set
        if (groupSyncUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupSyncUsersItem' when calling syncUsersToGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method synchronizes one or more users with a group.
     * @param id ID of group to be modifieded (required)
     * @param groupSyncUsersItem JSON API with array of users IDs to sync (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess syncUsersToGroup(String id, GroupSyncUsersItem groupSyncUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = syncUsersToGroupWithHttpInfo(id, groupSyncUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method synchronizes one or more users with a group.
     * @param id ID of group to be modifieded (required)
     * @param groupSyncUsersItem JSON API with array of users IDs to sync (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> syncUsersToGroupWithHttpInfo(String id, GroupSyncUsersItem groupSyncUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = syncUsersToGroupCall(id, groupSyncUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method synchronizes one or more users with a group.
     * @param id ID of group to be modifieded (required)
     * @param groupSyncUsersItem JSON API with array of users IDs to sync (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncUsersToGroupAsync(String id, GroupSyncUsersItem groupSyncUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncUsersToGroupCall(id, groupSyncUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateClient */
    private com.squareup.okhttp.Call updateClientCall(String userId, String clientId, ClientUpdateItem clientUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientUpdateItem;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateClient(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClient(Async)");
        }
        
        // verify the required parameter 'clientUpdateItem' is set
        if (clientUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'clientUpdateItem' when calling updateClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing Oauth client.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @param clientUpdateItem Client object to edit (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem updateClient(String userId, String clientId, ClientUpdateItem clientUpdateItem) throws ApiException {
        ApiResponse<ClientItem> resp = updateClientWithHttpInfo(userId, clientId, clientUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing Oauth client.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @param clientUpdateItem Client object to edit (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> updateClientWithHttpInfo(String userId, String clientId, ClientUpdateItem clientUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateClientCall(userId, clientId, clientUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing Oauth client.
     * @param userId ID of user to retrieve (required)
     * @param clientId ID of client to retrieve (required)
     * @param clientUpdateItem Client object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientAsync(String userId, String clientId, ClientUpdateItem clientUpdateItem, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientCall(userId, clientId, clientUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateEvent */
    private com.squareup.okhttp.Call updateEventCall(String processId, String eventId, EventUpdateItem eventUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEvent(Async)");
        }
        
        // verify the required parameter 'eventUpdateItem' is set
        if (eventUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'eventUpdateItem' when calling updateEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing event
     * @param processId ID of process to retrieve (required)
     * @param eventId ID of event to retrieve (required)
     * @param eventUpdateItem Event object to edit (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem updateEvent(String processId, String eventId, EventUpdateItem eventUpdateItem) throws ApiException {
        ApiResponse<EventItem> resp = updateEventWithHttpInfo(processId, eventId, eventUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing event
     * @param processId ID of process to retrieve (required)
     * @param eventId ID of event to retrieve (required)
     * @param eventUpdateItem Event object to edit (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> updateEventWithHttpInfo(String processId, String eventId, EventUpdateItem eventUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateEventCall(processId, eventId, eventUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing event
     * @param processId ID of process to retrieve (required)
     * @param eventId ID of event to retrieve (required)
     * @param eventUpdateItem Event object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventAsync(String processId, String eventId, EventUpdateItem eventUpdateItem, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventCall(processId, eventId, eventUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateEventConnector */
    private com.squareup.okhttp.Call updateEventConnectorCall(String processId, String eventId, String connectorId, EventConnectorUpdateItem eventConnectorUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventConnectorUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateEventConnector(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEventConnector(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling updateEventConnector(Async)");
        }
        
        // verify the required parameter 'eventConnectorUpdateItem' is set
        if (eventConnectorUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'eventConnectorUpdateItem' when calling updateEventConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method lets update the existing Event connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of Event Connector to fetch (required)
     * @param eventConnectorUpdateItem EventConnector object to edit (required)
     * @return EventConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventConnector1 updateEventConnector(String processId, String eventId, String connectorId, EventConnectorUpdateItem eventConnectorUpdateItem) throws ApiException {
        ApiResponse<EventConnector1> resp = updateEventConnectorWithHttpInfo(processId, eventId, connectorId, eventConnectorUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method lets update the existing Event connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of Event Connector to fetch (required)
     * @param eventConnectorUpdateItem EventConnector object to edit (required)
     * @return ApiResponse&lt;EventConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventConnector1> updateEventConnectorWithHttpInfo(String processId, String eventId, String connectorId, EventConnectorUpdateItem eventConnectorUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateEventConnectorCall(processId, eventId, connectorId, eventConnectorUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method lets update the existing Event connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param connectorId ID of Event Connector to fetch (required)
     * @param eventConnectorUpdateItem EventConnector object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventConnectorAsync(String processId, String eventId, String connectorId, EventConnectorUpdateItem eventConnectorUpdateItem, final ApiCallback<EventConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventConnectorCall(processId, eventId, connectorId, eventConnectorUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateFlow */
    private com.squareup.okhttp.Call updateFlowCall(String processId, String flowId, FlowUpdateItem flowUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flowUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateFlow(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling updateFlow(Async)");
        }
        
        // verify the required parameter 'flowUpdateItem' is set
        if (flowUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'flowUpdateItem' when calling updateFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing flow.
     * @param processId ID of process to retrieve (required)
     * @param flowId ID of flow to retrieve (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem updateFlow(String processId, String flowId, FlowUpdateItem flowUpdateItem) throws ApiException {
        ApiResponse<FlowItem> resp = updateFlowWithHttpInfo(processId, flowId, flowUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing flow.
     * @param processId ID of process to retrieve (required)
     * @param flowId ID of flow to retrieve (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> updateFlowWithHttpInfo(String processId, String flowId, FlowUpdateItem flowUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateFlowCall(processId, flowId, flowUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing flow.
     * @param processId ID of process to retrieve (required)
     * @param flowId ID of flow to retrieve (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFlowAsync(String processId, String flowId, FlowUpdateItem flowUpdateItem, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFlowCall(processId, flowId, flowUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateGateway */
    private com.squareup.okhttp.Call updateGatewayCall(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gatewayUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateGateway(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling updateGateway(Async)");
        }
        
        // verify the required parameter 'gatewayUpdateItem' is set
        if (gatewayUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateItem' when calling updateGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing gateway.
     * @param processId ID of process to retrieve (required)
     * @param gatewayId ID of gateway to retrieve (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem updateGateway(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        ApiResponse<GatewayItem> resp = updateGatewayWithHttpInfo(processId, gatewayId, gatewayUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing gateway.
     * @param processId ID of process to retrieve (required)
     * @param gatewayId ID of gateway to retrieve (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> updateGatewayWithHttpInfo(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateGatewayCall(processId, gatewayId, gatewayUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing gateway.
     * @param processId ID of process to retrieve (required)
     * @param gatewayId ID of gateway to retrieve (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGatewayAsync(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGatewayCall(processId, gatewayId, gatewayUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateGroup */
    private com.squareup.okhttp.Call updateGroupCall(String id, GroupUpdateItem groupUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'groupUpdateItem' is set
        if (groupUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'groupUpdateItem' when calling updateGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing group.
     * @param id ID of group to retrieve (required)
     * @param groupUpdateItem Group object to edit (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem updateGroup(String id, GroupUpdateItem groupUpdateItem) throws ApiException {
        ApiResponse<GroupItem> resp = updateGroupWithHttpInfo(id, groupUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing group.
     * @param id ID of group to retrieve (required)
     * @param groupUpdateItem Group object to edit (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> updateGroupWithHttpInfo(String id, GroupUpdateItem groupUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateGroupCall(id, groupUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing group.
     * @param id ID of group to retrieve (required)
     * @param groupUpdateItem Group object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGroupAsync(String id, GroupUpdateItem groupUpdateItem, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGroupCall(id, groupUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInputOutput */
    private com.squareup.okhttp.Call updateInputOutputCall(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputOutputUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'inputOutputUpdateItem' is set
        if (inputOutputUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'inputOutputUpdateItem' when calling updateInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing Input/Output object.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to retrieve (required)
     * @param inputOutputUpdateItem Input/Output object to edit (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem updateInputOutput(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem) throws ApiException {
        ApiResponse<InputOutputItem> resp = updateInputOutputWithHttpInfo(processId, taskId, inputoutputUid, inputOutputUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing Input/Output object.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to retrieve (required)
     * @param inputOutputUpdateItem Input/Output object to edit (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> updateInputOutputWithHttpInfo(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateInputOutputCall(processId, taskId, inputoutputUid, inputOutputUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing Input/Output object.
     * @param processId Process ID related to the Input/Output object (required)
     * @param taskId Task instance ID related to the Input/Output object (required)
     * @param inputoutputUid ID of Input/Output to retrieve (required)
     * @param inputOutputUpdateItem Input/Output object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInputOutputAsync(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInputOutputCall(processId, taskId, inputoutputUid, inputOutputUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInstance */
    private com.squareup.okhttp.Call updateInstanceCall(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = instanceUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateInstance(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateInstance(Async)");
        }
        
        // verify the required parameter 'instanceUpdateItem' is set
        if (instanceUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'instanceUpdateItem' when calling updateInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates  an existing instance.
     * @param processId ID of Process to retrieve (required)
     * @param instanceId ID of Instance to retrieve (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem updateInstance(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem) throws ApiException {
        ApiResponse<InstanceItem> resp = updateInstanceWithHttpInfo(processId, instanceId, instanceUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates  an existing instance.
     * @param processId ID of Process to retrieve (required)
     * @param instanceId ID of Instance to retrieve (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> updateInstanceWithHttpInfo(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateInstanceCall(processId, instanceId, instanceUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates  an existing instance.
     * @param processId ID of Process to retrieve (required)
     * @param instanceId ID of Instance to retrieve (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInstanceAsync(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInstanceCall(processId, instanceId, instanceUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateProcess */
    private com.squareup.okhttp.Call updateProcessCall(String id, ProcessUpdateItem processUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProcess(Async)");
        }
        
        // verify the required parameter 'processUpdateItem' is set
        if (processUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'processUpdateItem' when calling updateProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing process.
     * @param id ID of process to retrieve (required)
     * @param processUpdateItem Process object to edit (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem updateProcess(String id, ProcessUpdateItem processUpdateItem) throws ApiException {
        ApiResponse<ProcessItem> resp = updateProcessWithHttpInfo(id, processUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing process.
     * @param id ID of process to retrieve (required)
     * @param processUpdateItem Process object to edit (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> updateProcessWithHttpInfo(String id, ProcessUpdateItem processUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateProcessCall(id, processUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing process.
     * @param id ID of process to retrieve (required)
     * @param processUpdateItem Process object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProcessAsync(String id, ProcessUpdateItem processUpdateItem, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProcessCall(id, processUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTask */
    private com.squareup.okhttp.Call updateTaskCall(String processId, String taskId, TaskUpdateItem taskUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskUpdateItem' is set
        if (taskUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateItem' when calling updateTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem updateTask(String processId, String taskId, TaskUpdateItem taskUpdateItem) throws ApiException {
        ApiResponse<TaskItem> resp = updateTaskWithHttpInfo(processId, taskId, taskUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> updateTaskWithHttpInfo(String processId, String taskId, TaskUpdateItem taskUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskCall(processId, taskId, taskUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(String processId, String taskId, TaskUpdateItem taskUpdateItem, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskCall(processId, taskId, taskUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaskConnector */
    private com.squareup.okhttp.Call updateTaskConnectorCall(String processId, String taskId, String connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskConnectorUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateTaskConnector(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskConnector(Async)");
        }
        
        // verify the required parameter 'connectorId' is set
        if (connectorId == null) {
            throw new ApiException("Missing the required parameter 'connectorId' when calling updateTaskConnector(Async)");
        }
        
        // verify the required parameter 'taskConnectorUpdateItem' is set
        if (taskConnectorUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'taskConnectorUpdateItem' when calling updateTaskConnector(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method lets update the existing Task connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of Task Connector to fetch (required)
     * @param taskConnectorUpdateItem TaskConnector object to edit (required)
     * @return TaskConnector1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskConnector1 updateTaskConnector(String processId, String taskId, String connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem) throws ApiException {
        ApiResponse<TaskConnector1> resp = updateTaskConnectorWithHttpInfo(processId, taskId, connectorId, taskConnectorUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method lets update the existing Task connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of Task Connector to fetch (required)
     * @param taskConnectorUpdateItem TaskConnector object to edit (required)
     * @return ApiResponse&lt;TaskConnector1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskConnector1> updateTaskConnectorWithHttpInfo(String processId, String taskId, String connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskConnectorCall(processId, taskId, connectorId, taskConnectorUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method lets update the existing Task connector with new parameters values
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param connectorId ID of Task Connector to fetch (required)
     * @param taskConnectorUpdateItem TaskConnector object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskConnectorAsync(String processId, String taskId, String connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem, final ApiCallback<TaskConnector1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskConnectorCall(processId, taskId, connectorId, taskConnectorUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskConnector1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaskInstance */
    private com.squareup.okhttp.Call updateTaskInstanceCall(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskInstanceUpdateItem;
        
        // verify the required parameter 'taskInstanceId' is set
        if (taskInstanceId == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceId' when calling updateTaskInstance(Async)");
        }
        
        // verify the required parameter 'taskInstanceUpdateItem' is set
        if (taskInstanceUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceUpdateItem' when calling updateTaskInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/task_instances/{task_instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "task_instance_id" + "\\}", apiClient.escapeString(taskInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing task instance.
     * @param taskInstanceId ID of task instance to retrieve (required)
     * @param taskInstanceUpdateItem Task Instance object to update (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 updateTaskInstance(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem) throws ApiException {
        ApiResponse<InlineResponse200> resp = updateTaskInstanceWithHttpInfo(taskInstanceId, taskInstanceUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing task instance.
     * @param taskInstanceId ID of task instance to retrieve (required)
     * @param taskInstanceUpdateItem Task Instance object to update (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> updateTaskInstanceWithHttpInfo(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskInstanceCall(taskInstanceId, taskInstanceUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing task instance.
     * @param taskInstanceId ID of task instance to retrieve (required)
     * @param taskInstanceUpdateItem Task Instance object to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskInstanceAsync(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskInstanceCall(taskInstanceId, taskInstanceUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateUser */
    private com.squareup.okhttp.Call updateUserCall(String id, UserUpdateItem userUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userUpdateItem' is set
        if (userUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'userUpdateItem' when calling updateUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method updates an existing user.
     * @param id ID of user to retrieve (required)
     * @param userUpdateItem User object for update (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem updateUser(String id, UserUpdateItem userUpdateItem) throws ApiException {
        ApiResponse<UserItem> resp = updateUserWithHttpInfo(id, userUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method updates an existing user.
     * @param id ID of user to retrieve (required)
     * @param userUpdateItem User object for update (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> updateUserWithHttpInfo(String id, UserUpdateItem userUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateUserCall(id, userUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method updates an existing user.
     * @param id ID of user to retrieve (required)
     * @param userUpdateItem User object for update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String id, UserUpdateItem userUpdateItem, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserCall(id, userUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
